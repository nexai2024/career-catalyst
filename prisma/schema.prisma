generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                  @id @default(cuid())
  authid                String?                 @unique
  email                 String                  @unique
  name                  String?
  image                 String?
  currentPosition       String?
  location              String?
  bio                   String?
  careerGoals           String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  Assessment            Assessment[]
  careerPlans           CareerPlan[]
  createdCourses        Course[]
  CourseReviews         CourseReviews[]
  documents             Document[]
  experiences           Experience[]
  interviews            Interview[]
  applications          JobApplication[]
  learningPlans         LearningPlan[]
  learningProgress      LearningProgress[]
  profiles              Profile[]
  Questions             Questions[]
  skills                Skill[]
  userAssessments       UserAssessment[]
  UserCourseEnrollments UserCourseEnrollments[]
  UserModuleProgress    UserModuleProgress[]
  UserResponses         UserResponses[]
}

model Profile {
  id               String    @id @default(cuid())
  userId           String
  title            String
  company          String?
  startDate        DateTime
  endDate          DateTime?
  description      String?
  achievements     String?
  personal_info    Json?
  education        Json?
  experience       Json?
  technical_skills Json?
  soft_skills      Json?
  self_assessment  Json?
  certifications   Json?
  goals            Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  completedAt      DateTime?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  category  String
  level     Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Assessment {
  id              String               @id @default(dbgenerated("gen_random_uuid()"))
  title           String
  description     String?
  type            String?              @default("default")
  passingScore    Float?
  timeLimit       Int?                 @default(60)
  attempts        Int                  @default(1)
  completedAt     DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  endDate         DateTime?
  isPublished     Boolean?             @default(false)
  startDate       DateTime?
  userId          String
  instructions    String?
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions       AssessmentQuestion[]
  userAssessments UserAssessment[]
}

model AssessmentQuestion {
  id           String     @id @default(dbgenerated("gen_random_uuid()"))
  assessmentId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  questionId   String
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  question     Questions  @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model UserAssessment {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  userId        String
  assessmentId  String
  score         Float?
  attempts      Int             @default(1)
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  assessment    Assessment      @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserResponses UserResponses[]
}

model CareerPlan {
  id          String      @id @default(dbgenerated("gen_random_uuid()"))
  userId      String
  title       String
  description String?
  targetRole  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones  Milestone[]
}

model Milestone {
  id           String     @id @default(cuid())
  careerPlanId String
  title        String
  description  String?
  deadline     DateTime?
  completed    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  careerPlan   CareerPlan @relation(fields: [careerPlanId], references: [id], onDelete: Cascade)
}

model Course {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()"))
  title                 String
  description           String?
  category              String
  content               String?
  durationMinutes       Int?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userId                String
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  CourseModules         CourseModules[]
  CourseReviews         CourseReviews[]
  learningProgress      LearningProgress[]
  UserCourseEnrollments UserCourseEnrollments[]
}

model LearningProgress {
  id                   String    @id @default(dbgenerated("gen_random_uuid()"))
  userId               String
  courseId             String
  completionPercentage Float     @default(0)
  lastAccessed         DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  course               Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Interview {
  id           String              @id @default(cuid())
  userId       String
  roleTitle    String
  feedback     String?
  recordingUrl String?
  score        Float?
  completedAt  DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions    InterviewQuestion[]
}

model InterviewQuestion {
  id          String    @id @default(cuid())
  interviewId String
  question    String
  answer      String?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
}

model Document {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  type      String
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id           String           @id @default(cuid())
  title        String
  company      String
  location     String?
  description  String?
  requirements String?
  salary       String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  applications JobApplication[]
}

model JobApplication {
  id          String   @id @default(cuid())
  userId      String
  jobId       String
  status      String
  appliedDate DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  userId       String
  company      String
  role         String
  startDate    DateTime  @db.Date
  endDate      DateTime? @db.Date
  description  String?
  achievements String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  current      Boolean   @default(false)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LearningPlan {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  title     String
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CourseModules {
  id                 String               @id(map: "course_modules_pkey") @default(dbgenerated("gen_random_uuid()"))
  course_id          String
  title              String
  description        String?
  content_type       String
  content_url        String?
  content_text       String?
  duration_minutes   Int?
  module_order       Int
  is_required        Boolean              @default(true)
  created_at         DateTime             @default(now())
  updated_at         DateTime
  Course             Course               @relation(fields: [course_id], references: [id], onDelete: Cascade, map: "course_modules_course_id_fkey")
  UserModuleProgress UserModuleProgress[]
}

model CourseReviews {
  id          String   @id(map: "course_reviews_pkey") @default(dbgenerated("gen_random_uuid()"))
  user_id     String
  course_id   String
  rating      Int
  review_text String?
  created_at  DateTime @default(now())
  updated_at  DateTime
  Course      Course   @relation(fields: [course_id], references: [id], onDelete: Cascade, map: "course_reviews_course_id_fkey")
  User        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "course_reviews_user_id_fkey")

  @@unique([user_id, course_id], map: "course_reviews_user_id_course_id_key")
}

model Questions {
  id                  String               @id(map: "questions_pkey") @default(dbgenerated("gen_random_uuid()"))
  question_text       String
  question_type       String
  options             Json?
  correct_answer      String?
  explanation         String?
  category            String?
  difficulty          String
  created_by          String
  created_at          DateTime             @default(now())
  updated_at          DateTime
  points              Int?
  assessmentQuestions AssessmentQuestion[]
  User                User                 @relation(fields: [created_by], references: [id], onDelete: Cascade, map: "questions_created_by_fkey")
  UserResponses       UserResponses[]
}

model UserCourseEnrollments {
  id                  String    @id(map: "user_course_enrollments_pkey") @default(dbgenerated("gen_random_uuid()"))
  user_id             String
  course_id           String
  enrolled_at         DateTime  @default(now())
  started_at          DateTime?
  completed_at        DateTime?
  progress_percentage Int       @default(0)
  last_accessed_at    DateTime?
  status              String    @default("enrolled")
  created_at          DateTime  @default(now())
  updated_at          DateTime
  Course              Course    @relation(fields: [course_id], references: [id], onDelete: Cascade, map: "user_course_enrollments_course_id_fkey")
  User                User      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_course_enrollments_user_id_fkey")

  @@unique([user_id, course_id], map: "user_course_enrollments_user_id_course_id_key")
}

model UserModuleProgress {
  id                 String        @id(map: "user_module_progress_pkey") @default(dbgenerated("gen_random_uuid()"))
  user_id            String
  course_id          String
  module_id          String
  started_at         DateTime?
  completed_at       DateTime?
  time_spent_minutes Int           @default(0)
  score              Int?
  status             String        @default("not_started")
  created_at         DateTime      @default(now())
  updated_at         DateTime
  CourseModules      CourseModules @relation(fields: [module_id], references: [id], onDelete: Cascade, map: "user_module_progress_module_id_fkey")
  User               User          @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_module_progress_user_id_fkey")

  @@unique([user_id, module_id], map: "user_module_progress_user_id_module_id_key")
}

model UserResponses {
  id                 String         @id(map: "user_responses_pkey") @default(dbgenerated("gen_random_uuid()"))
  userId             String
  user_assessment_id String
  question_id        String
  response           String?
  is_correct         Boolean?
  points_earned      Int            @default(0)
  created_at         DateTime       @default(now())
  updated_at         DateTime
  Questions          Questions      @relation(fields: [question_id], references: [id], onDelete: Cascade, map: "user_responses_question_id_fkey")
  User               User           @relation(fields: [userId], references: [id], onDelete: Cascade, map: "user_responses_userId_fkey")
  UserAssessment     UserAssessment @relation(fields: [user_assessment_id], references: [id], onDelete: Cascade, map: "user_responses_user_assessment_id_fkey")
}
