generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String                 @id @default(cuid())
  authid            String?                @unique
  email             String                 @unique
  name              String?
  image             String?
  currentPosition   String?
  location          String?
  bio               String?
  careerGoals       String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  careerPlans       CareerPlan[]
  documents         Document[]
  experiences       Experience[]
  interviews        Interview[]
  applications      JobApplication[]
  learningPlans     LearningPlan[]
  learningProgress  LearningProgress[]
  profiles          Profile[]
  skills            Skill[]
  // Course-related relationships
  createdCourses    Course[]
  courseEnrollments UserCourseEnrollment[]
  moduleProgress    UserModuleProgress[]
  courseReviews     CourseReview[]

  // Assessment-related relationships
  createdQuestions Question[]       @relation("QuestionCreator")
  userAssessments  UserAssessment[]
  userResponses    UserResponse[]

  Assessment Assessment[]
}

model Profile {
  id               String    @id @default(cuid())
  userId           String
  title            String
  company          String?
  startDate        DateTime
  endDate          DateTime?
  description      String?
  achievements     String?
  personal_info    Json?
  education        Json?
  experience       Json?
  technical_skills Json?
  soft_skills      Json?
  self_assessment  Json?
  certifications   Json?
  goals            Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  completedAt      DateTime?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  category  String
  level     Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Assessment {
  id              String               @id @default(cuid())
  userId          String
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  title           String
  description     String?
  instructions    String?
  type            String
  passingScore    Float?
  timeLimit       Int?                 @default(60)
  attempts        Int                  @default(1)
  isPublished     Boolean?             @default(false)
  startDate       DateTime?
  endDate         DateTime?
  completedAt     DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  questions       AssessmentQuestion[]
  userAssessments UserAssessment[]
}

model AssessmentQuestion {
  id           String @id @default(cuid())
  assessmentId String
  questionId   String

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Question {
  id            String   @id @default(cuid())
  questionText  String   @map("question_text")
  questionType  String   @map("question_type") // 'multiple_choice', 'true_false', 'short_answer', 'essay'
  options       Json?
  correctAnswer String?  @map("correct_answer")
  explanation   String?
  category      String?
  difficulty    String // 'easy', 'medium', 'hard'
  createdBy     String   @map("created_by")
  creator       User     @relation("QuestionCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  assessmentQuestions AssessmentQuestion[]
  userResponses       UserResponse[]

  @@map("questions")
}

model UserAssessment {
  id            String         @id @default(cuid())
  userId        String
  assessmentId  String
  userResponses UserResponse[]
  score         Float?
  attempts      Int            @default(1)
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  assessment    Assessment     @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserResponse {
  id               String         @id @default(cuid())
  userId           String
  userAssessmentId String         @map("user_assessment_id")
  userAssessment   UserAssessment @relation(fields: [userAssessmentId], references: [id], onDelete: Cascade)
  questionId       String         @map("question_id")
  question         Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  response         String?
  isCorrect        Boolean?       @map("is_correct")
  pointsEarned     Int            @default(0) @map("points_earned")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_responses")
}

model CareerPlan {
  id          String      @id @default(cuid())
  userId      String
  title       String
  description String?
  targetRole  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones  Milestone[]
}

model Milestone {
  id           String     @id @default(cuid())
  careerPlanId String
  title        String
  description  String?
  deadline     DateTime?
  completed    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  careerPlan   CareerPlan @relation(fields: [careerPlanId], references: [id], onDelete: Cascade)
}

model Course {
  id                String                 @id @default(cuid())
  title             String
  userId            String
  description       String?
  category          String
  content           String?
  durationMinutes   Int?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  learningProgress  LearningProgress[]
  courseModules     CourseModule[]
  courseReviews     CourseReview[]
  courseEnrollments UserCourseEnrollment[]
  user              User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CourseModule {
  id              String   @id @default(cuid())
  courseId        String   @map("course_id")
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title           String
  description     String?
  contentType     String   @map("content_type") // 'video', 'text', 'quiz', 'assignment', 'reading'
  contentUrl      String?  @map("content_url")
  contentText     String?  @map("content_text")
  durationMinutes Int?     @map("duration_minutes")
  moduleOrder     Int      @map("module_order")
  isRequired      Boolean  @default(true) @map("is_required")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  userProgress UserModuleProgress[]

  @@map("course_modules")
}

model UserCourseEnrollment {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId           String    @map("course_id")
  course             Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt         DateTime  @default(now()) @map("enrolled_at")
  startedAt          DateTime? @map("started_at")
  completedAt        DateTime? @map("completed_at")
  progressPercentage Int       @default(0) @map("progress_percentage")
  lastAccessedAt     DateTime? @map("last_accessed_at")
  status             String    @default("enrolled") // 'enrolled', 'in_progress', 'completed', 'dropped'
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@unique([userId, courseId])
  @@map("user_course_enrollments")
}

model UserModuleProgress {
  id               String       @id @default(cuid())
  userId           String       @map("user_id")
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId         String       @map("course_id")
  moduleId         String       @map("module_id")
  module           CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  startedAt        DateTime?    @map("started_at")
  completedAt      DateTime?    @map("completed_at")
  timeSpentMinutes Int          @default(0) @map("time_spent_minutes")
  score            Int?
  status           String       @default("not_started") @map("status") // 'not_started', 'in_progress', 'completed'
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  @@unique([userId, moduleId])
  @@map("user_module_progress")
}

model CourseReview {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId   String   @map("course_id")
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  rating     Int // 1-5 stars
  reviewText String?  @map("review_text")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([userId, courseId])
  @@map("course_reviews")
}

model LearningProgress {
  id                   String    @id @default(cuid())
  userId               String
  courseId             String
  completionPercentage Float     @default(0)
  lastAccessed         DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  course               Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Interview {
  id           String              @id @default(cuid())
  userId       String
  roleTitle    String
  feedback     String?
  recordingUrl String?
  score        Float?
  completedAt  DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions    InterviewQuestion[]
}

model InterviewQuestion {
  id          String    @id @default(cuid())
  interviewId String
  question    String
  answer      String?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
}

model Document {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id           String           @id @default(cuid())
  title        String
  company      String
  location     String?
  description  String?
  requirements String?
  salary       String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  applications JobApplication[]
}

model JobApplication {
  id          String   @id @default(cuid())
  userId      String
  jobId       String
  status      String
  appliedDate DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id           String    @id @default(cuid())
  userId       String
  company      String
  role         String
  startDate    DateTime  @db.Date
  endDate      DateTime? @db.Date
  description  String?
  achievements String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  current      Boolean   @default(false)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LearningPlan {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
