generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(cuid())
  authid           String?            @unique
  email            String             @unique
  name             String?
  image            String?
  currentPosition  String?
  location         String?
  bio              String?
  careerGoals      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ownerassessments Assessment[]
  careerPlans      CareerPlan[]
  documents        Document[]
  interviews       Interview[]
  applications     JobApplication[]
  learningProgress LearningProgress[]
  profiles         Profile[]
  skills           Skill[]
  userassessments  UserAssessment[]
  
}

model Profile {
  id           String    @id @default(cuid())
  userId       String
  title        String
  company      String?
  startDate    DateTime
  endDate      DateTime?
  description  String?
  achievements String?
  personal_info    Json?
  education        Json?
  experience       Json?
  technical_skills Json?
  soft_skills      Json?
  self_assessment  Json?
  certifications   Json?
  goals            Json?
  completedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  category  String
  level     Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  
}

model Assessment {
  id              String               @id @default(cuid())
  ownerId         String
  title           String
  description     String?
  type            String
  passingScore    Float?
  timeLimit       Int?                 @default(60)
  attempts        Int                  @default(1)
  completedAt     DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  owner           User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  questions       AssessmentQuestion[]
  userAssessments UserAssessment[]

  
}

model AssessmentQuestion {
  id            String     @id @default(cuid())
  assessmentId  String
  question      String
  answer        String?
  correctAnswer String?
  score         Float?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  assessment    Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  
}

model UserAssessment {
  id           String     @id @default(cuid())
  userId       String
  assessmentId String
  score        Float?
  attempts     Int        @default(1)
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  
}

model CareerPlan {
  id          String      @id @default(cuid())
  userId      String
  title       String
  description String?
  targetRole  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones  Milestone[]

  
}

model Milestone {
  id           String     @id @default(cuid())
  careerPlanId String
  title        String
  description  String?
  deadline     DateTime?
  completed    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  careerPlan   CareerPlan @relation(fields: [careerPlanId], references: [id], onDelete: Cascade)

  
}

model Course {
  id               String             @id @default(cuid())
  title            String
  description      String?
  category         String
  content          String?
  durationMinutes  Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  learningProgress LearningProgress[]

  
}

model LearningProgress {
  id                   String    @id @default(cuid())
  userId               String
  courseId             String
  completionPercentage Float     @default(0)
  lastAccessed         DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  course               Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  
}

model Interview {
  id           String              @id @default(cuid())
  userId       String
  roleTitle    String
  feedback     String?
  recordingUrl String?
  score        Float?
  completedAt  DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions    InterviewQuestion[]

  
}

model InterviewQuestion {
  id          String    @id @default(cuid())
  interviewId String
  question    String
  answer      String?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  
}

model Document {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  
}

model Job {
  id           String           @id @default(cuid())
  title        String
  company      String
  location     String?
  description  String?
  requirements String?
  salary       String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  applications JobApplication[]

  
}

model JobApplication {
  id          String   @id @default(cuid())
  userId      String
  jobId       String
  status      String
  appliedDate DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  
}



/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
