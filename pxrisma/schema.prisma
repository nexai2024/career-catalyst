datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String    @id @default(cuid())
  authid          String?   @unique
  email           String    @unique
  name            String?
  image           String?
  currentPosition String?
  location        String?
  bio             String?
  careerGoals     String?
  role            String    @default("user")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Profile         Profile[]
  Skill           Skill[]
  assessment      Assessment[]
  userAssessment  UserAssessment[]
  careerPlan      CareerPlan[]
  learningProgress LearningProgress[]
  interviews       Interview[]
  document        Document[]
  JobApplication  JobApplication[]
  experience      Experience[]
  questions       Questions[]
  userResponses  UserResponses[]
  courses         Course[]
  userCourseEnrollments UserCourseEnrollments[]
  userModuleProgress UserModuleProgress[]
  courseReviews  CourseReviews[]
  learningPlan    LearningPlan[]
  userSubscription UserSubscription?
  featureUsage    FeatureUsage[]
}

model Profile {
  id              String    @id @default(cuid())
  userId          String
  title           String
  company         String?
  startDate       DateTime
  endDate         DateTime?
  description     String?
  achievements    String?
  personalInfo   Json?
  education       Json?
  experience      Json?
  technicalSkills Json?
  softSkills     Json?
  selfAssessment Json?
  certifications  Json?
  goals           Json?
  completedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  category  String
  level     Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id              String    @id @default(cuid())
  name            String    @unique
  price           Float
  features        Json
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userSubscription UserSubscription[]
}

model UserSubscription {
  id              String      @id @default(cuid())
  userId          String      @unique
  subscriptionId  String
  startDate       DateTime
  endDate         DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model FeatureUsage {
  id          String   @id @default(cuid())
  userId      String
  feature     String
  usage       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, feature])
}

model Feature {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Assessment {
  id                 String               @id @default(cuid())
  userId             String
  title              String
  description        String?
  type               String?              @default("default")
  passingScore       Float?
  timeLimit          Int?                 @default(60)
  attempts           Int                  @default(1)
  completedAt        DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isPublished        Boolean?             @default(false)
  startDate          DateTime?
  endDate            DateTime?
  instructions       String?
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessmentQuestion AssessmentQuestion[]
  userAssessment     UserAssessment[]
}

model AssessmentQuestion {
  id           String     @id @default(cuid())
  assessmentId String
  questionId   String
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  question     Questions  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model UserAssessment {
  id             String           @id @default(cuid())
  userId         String
  assessmentId   String
  score          Float?
  attempts       Int              @default(1)
  startedAt      DateTime?
  completedAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  assessment     Assessment       @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userResponses UserResponses[]
}

model CareerPlan {
  id          String      @id @default(cuid())
  userId      String
  title       String
  description String?
  targetRole  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestone   Milestone[]
}

model Milestone {
  id           String     @id @default(cuid())
  careerPlanId String
  title        String
  description  String?
  deadline     DateTime?
  completed    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  careerPlan   CareerPlan @relation(fields: [careerPlanId], references: [id], onDelete: Cascade)
}

model Course {
  id              String    @id @default(cuid())
  userId          String
  title           String
  description     String?
  category        String
  content         String?
  durationMinutes Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningProgress LearningProgress[]
  courseModules  CourseModules[]
  userCourseEnrollments UserCourseEnrollments[]
  courseReviews  CourseReviews[]
}

model LearningProgress {
  id                   String    @id @default(cuid())
  userId               String
  courseId             String
  completionPercentage Float     @default(0)
  lastAccessed         DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  course               Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Interview {
  id                String              @id @default(cuid())
  userId            String
  roleTitle         String
  feedback          String?
  recordingUrl      String?
  score             Float?
  completedAt       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviewQuestion InterviewQuestion[]
}

model InterviewQuestion {
  id          String    @id @default(cuid())
  interviewId String
  question    String
  answer      String?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
}

model Document {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id             String           @id @default(cuid())
  title          String
  company        String
  location       String?
  description    String?
  requirements   String?
  salary         String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  jobApplication JobApplication[]
}

model JobApplication {
  id          String   @id @default(cuid())
  userId      String
  jobId       String
  status      String
  appliedDate DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id           String    @id @default(cuid())
  userId       String
  company      String
  role         String
  startDate    DateTime  @db.Date
  endDate      DateTime? @db.Date
  description  String?
  achievements String?
  current      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Questions {
  id                 String               @id @default(cuid())
  question_text      String
  question_type      String
  options            Json?
  correct_answer     String?
  explanation        String?
  category           String?
  difficulty         String
  createdBy         String
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  points             Int?
  user               User                 @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  assessmentQuestion AssessmentQuestion[]
  userResponses     UserResponses[]
}

model UserResponses {
  id                 String         @id @default(cuid())
  userId             String
  userAssessmentId String
  questionId        String
  response           String?
  isCorrect         Boolean?
  pointsEarned      Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  userAssessment    UserAssessment @relation(fields: [userAssessmentId], references: [id], onDelete: Cascade)
  question           Questions      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CourseModules {
  id                 String                 @id @default(cuid())
  course_id          String
  title              String
  description        String?
  content_type       String
  content_url        String?
  content_text       String?
  duration_minutes   Int?
  module_order       Int
  is_required        Boolean                @default(true)
  created_at         DateTime               @default(now())
  updated_at         DateTime               @updatedAt
  course             Course                 @relation(fields: [course_id], references: [id], onDelete: Cascade)
  UserModuleProgress UserModuleProgress[]
}

model UserCourseEnrollments {
  id                  String    @id @default(cuid())
  user_id             String
  course_id           String
  enrolled_at         DateTime  @default(now())
  started_at          DateTime?
  completed_at        DateTime?
  progress_percentage Int       @default(0)
  last_accessed_at    DateTime?
  status              String    @default("enrolled")
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course              Course    @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@unique([user_id, course_id])
}

model UserModuleProgress {
  id                 String         @id @default(cuid())
  user_id            String
  course_id          String
  module_id          String
  started_at         DateTime?
  completed_at       DateTime?
  time_spent_minutes Int            @default(0)
  score              Int?
  status             String         @default("not_started")
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  user               User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  module             CourseModules @relation(fields: [module_id], references: [id], onDelete: Cascade)

  @@unique([user_id, module_id])
}

model CourseReviews {
  id          String   @id @default(cuid())
  user_id     String
  course_id   String
  rating      Int
  review_text String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@unique([user_id, course_id])
}

model LearningPlan {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
